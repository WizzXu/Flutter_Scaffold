// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Bindings to `headers/example.h`.
class NativeLibrary {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NativeLibrary(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NativeLibrary.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  ffi.Pointer<ByteArray> callNative(
    ffi.Pointer<ffi.Int8> data,
    int length,
  ) {
    return _callNative(
      data,
      length,
    );
  }

  late final _callNative_ptr =
      _lookup<ffi.NativeFunction<_c_callNative>>('callNative');
  late final _dart_callNative _callNative =
      _callNative_ptr.asFunction<_dart_callNative>();
}

class ByteArray extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> data;

  @ffi.Int32()
  external int length;
}

typedef _c_callNative = ffi.Pointer<ByteArray> Function(
  ffi.Pointer<ffi.Int8> data,
  ffi.Int32 length,
);

typedef _dart_callNative = ffi.Pointer<ByteArray> Function(
  ffi.Pointer<ffi.Int8> data,
  int length,
);
